apply plugin: "java"

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = [ "src/main/java/" ]

project.ext.mainClassName = "ateamproject.kezuino.com.github.multiplayer.ServerLauncher"
project.ext.assetsDir = new File("../core/assets");

/**
 * Execute default actions before running.
 */
task runInit(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true

    // Launch as a command window instead of in the background.
    if(System.getProperty("os.name").toLowerCase().contains('win')){
        executable 'cmd'
        jvmArgs '/C'
        jvmArgs 'start'
        jvmArgs 'java'
    }
}

task run(dependsOn: [classes, runInit], type: JavaExec) {
    // Default run will startup as distribution version.
    systemProperty "java.rmi.server.hostname", "darkhellentertainment.com"
}

task dist(dependsOn: classes, type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);

    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

/**
 * Task for fixing a bug with the Gradle plugin in Netbeans.
 */
task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/core/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
    doLast {
        def classpath = new XmlParser().parse(file(".classpath"))
        new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
        def writer = new FileWriter(file(".classpath"))
        def printer = new XmlNodePrinter(new PrintWriter(writer))
        printer.setPreserveWhitespace(true)
        printer.print(classpath)
    }
}